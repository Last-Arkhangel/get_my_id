# -*- coding: utf-8 -*-
#info bot created by negative
import sys
import telebot
import json
import os
import datetime
import settings
import random
import requests as req
from telebot import types
from settings import KEYBOARD
import flask
from flask_sslify import SSLify

WEBHOOK_URL_BASE = "https://{}:{}".format(settings.WEBHOOK_HOST, settings.WEBHOOK_PORT)

bot = telebot.TeleBot(settings.BOT_TOKEN, threaded=True)

# —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–µ–±—Ö—É–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
bot.remove_webhook()

# —Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫ = –°–ª—ã—à—å, –µ—Å–ª–∏ –∫—Ç–æ –º–Ω–µ –Ω–∞–ø–∏—à–µ—Ç, —Å—Ç—É–∫–Ω–∏ —Å—é–¥–∞ ‚Äî url
bot.set_webhook(url=WEBHOOK_URL_BASE + settings.WEBHOOK_PATH)

app = flask.Flask(__name__)
sslify = SSLify(app)

keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
keyboard.row( KEYBOARD['ID_INFO'])
keyboard.row(KEYBOARD['DI_MY'], KEYBOARD['ID_HELP'])

@bot.message_handler(commands=['start'])
def welcome(m):
    cid = m.chat.id
    msg = '–í—ñ—Ç–∞—é {} üòä, —è –±–æ—Ç —â–æ –ø–æ–∫–∞–∑—É—î —Ç–≤—ñ–π ID (—ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä) –≤ –¢–µ–ª–µ–≥—Ä–∞–º—ñ, –≤–µ—Ä—Å—ñ—è –±–æ—Ç–∞ {} —Ä.'.format(m.chat.first_name + ' ' + (m.chat.last_name or ''), settings.VERSION)
    ret_msg = bot.send_message(cid, msg, disable_notification=True, reply_markup=keyboard)
    assert ret_msg.message_id

@bot.message_handler(content_types=["text"])
def main_menu(message):
    name = message.from_user.first_name + ' ' + (message.from_user.last_name or '')
    cid = message.chat.id
    text = message.text    
    usr = message.chat.username
    f = message.chat.first_name
    l = message.chat.last_name
    t = message.chat.type
    d = message.date
    fc = message.from_user.language_code
    fcid = message.from_user.id
    ffirst = message.from_user.first_name
    flast = message.from_user.last_name
    fusr = message.from_user.username
    
    if message.text == KEYBOARD['DI_MY']:
        dtn = datetime.datetime.now()
        botlogfile = open('bot_id_logs.txt', 'a', encoding='utf-8')
        print(dtn.strftime("[%d-%m-%Y %H:%M:%S]:"), "({}, @{}, id:{}) -> {}".format(name, usr, fcid, text), file=botlogfile)
        botlogfile.close()
        msg = '<b>{}</b> –í–∞—à ID = {}'.format(name, fcid)
        bot.send_message(cid, msg, parse_mode='HTML', reply_markup=keyboard)

    elif message.text == KEYBOARD['ID_INFO']:
        dtn = datetime.datetime.now()
        botlogfile = open('bot_id_logs.txt', 'a', encoding='utf-8')
        print(dtn.strftime("[%d-%m-%Y %H:%M:%S]:"), "({}, @{}, id:{}) -> {}".format(name, usr, fcid, text), file=botlogfile)
        botlogfile.close()
        msg = '<b>–í–∞—à ID</b>: {} \n<b>–í–∞—à–µ —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>: @{} \n<b>–í–∞—à–µ —ñ–º\'—è</b>: {}\n<b>–í–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ</b>: {}\n<b>–¢–∏–ø</b>: {}\n<b>–î–∞–Ω—ñ –∑–∞–ø–∏—Ç—É</b>: {}\n<b>–í–∞—à –∑–∞–ø–∏—Ç</b>: {}\n<b>–ú–æ–≤–∞</b>: {}'.format(cid,usr,f,l,t,d,text,fc)
        bot.send_chat_action(cid, "typing")
        bot.reply_to(message, msg, parse_mode='HTML', reply_markup=keyboard)

    elif message.text == KEYBOARD['ID_FBACK']:
        dtn = datetime.datetime.now()
        botlogfile = open('bot_id_logs.txt', 'a', encoding='utf-8')
        print(dtn.strftime("[%d-%m-%Y %H:%M:%S]:"), "({}, @{}, id:{}) -> {}".format(name, usr, fcid, text), file=botlogfile)
        botlogfile.close()
        str = message.text
        txt = str.replace('/feedback', '')
        bot.send_message(cid, "–î—è–∫—É—é. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É", parse_mode='HTML', reply_markup=keyboard)
        bot.send_message(settings.ADMINS_ID, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {}\nID: {}\n–Ü–º'—è: {}\n–ü—Ä—ñ–∑–≤–∏—â–µ: {}\n–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: @{}".format(txt,fcid,ffirst,flast,fusr))

    elif message.text == KEYBOARD['ID_HELP']:
        dtn = datetime.datetime.now()
        botlogfile = open('bot_id_logs.txt', 'a', encoding='utf-8')
        print(dtn.strftime("[%d-%m-%Y %H:%M:%S]:"), "({}, @{}, id:{}) -> {}".format(name, usr, fcid, text), file=botlogfile)
        botlogfile.close()
        msg = '–í—ñ—Ç–∞—é {}, –≤–µ—Ä—Å—ñ—è –±–æ—Ç–∞ {}\n\n' \
              '–Ø–∫—â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–æ—Å—Ç—É–ø –¥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≥–æ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞ —Å–∫–æ–ø—ñ—é–π—Ç–µ –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ ID —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —ó—ó –≤ —á–∞—Ç –±–æ—Ç –¢–ê –î–ù–ó &quot;–î–¢–†–ï–ö&quot;'.format(name, settings.VERSION)
        bot.send_message(cid, msg, disable_notification=True, parse_mode='HTML', reply_markup=keyboard)
        
    else:
        msg = '–ù–µ –Ω–∞–º–∞–≥–∞–π—Ç–µ—Å—å –ø–∏—Å–∞—Ç–∏ –±–æ—Ç–æ–≤—ñ –≤—ñ–Ω –Ω–µ —Ä–æ–∑—É–º—ñ—î. –í—ñ–Ω –ø–æ–∫–∞–∑—É—î –≤–∞–º —Ç—ñ–ª—å–∫–∏ –≤–∞—à—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.'
        bot.send_message(cid, msg, parse_mode='HTML')

@bot.message_handler(content_types=['sticker'])
def handler_sticker(m):
    dtn = datetime.datetime.now()
    botlogfile = open('bot_id_logs.txt', 'a', encoding='utf-8')
    print(dtn.strftime("[%d-%m-%Y %H:%M:%S]:"), "({}, @{}, id:{}) -> {}".format(m.chat.first_name + ' ' + (m.chat.last_name or ''), m.chat.username, m.from_user.id, m.content_type), file=botlogfile)
    botlogfile.close()
    bot.send_message(m.chat.id, "<b>–°—Ç—ñ–∫–µ—Ä ID</b>: " + m.sticker.file_id, parse_mode='HTML')

@bot.message_handler(commands=['log'])
def text(m):
    if m.chat.id == settings.ADMINS_ID:
        file = open('bot_id_logs.txt', 'rb')
        bot.send_document(m.chat.id, file)
    else:
        bot.send_message(m.chat.id, settings.NO_ADMIN)
        

# –ø—É—Å—Ç–∞—è –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—á–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@app.route('/', methods=['GET', 'HEAD'])
def index():
    return 'ok'

# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–∑–æ–≤—ã –≤–µ–±—Ö—É–∫–∞ = —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∫ –Ω–∞–º –ø–æ—Å—Ç—É—á–∞–ª—Å—è —Ç–µ–ª–µ–≥—Ä–∞–º 
@app.route(settings.WEBHOOK_PATH, methods=['POST'])
def webhook():
    if flask.request.headers.get('content-type') == 'application/json':
        json_string = flask.request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        flask.abort(403)

# Start polling server
#bot.polling(interval=settings.POLLING_INTERVAL, timeout=settings.POLLING_TIMEOUT, none_stop=True)

# Start flask server
app.run(host=settings.WEBHOOK_LISTEN,
        port=settings.WEBHOOK_PORT,
        ssl_context=(settings.WEBHOOK_SSL_CERT, settings.WEBHOOK_SSL_PRIV),
        debug=settings.WEBHOOK_DEBUG)